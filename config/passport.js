/*
    CONFIGURES JWT STRATEGY
*/
const fs = require('fs');
const path = require('path');
const JwtStrategy = require('passport-jwt').Strategy;
const ExtractJwt = require('passport-jwt').ExtractJwt;


const pathToKey = path.join(__dirname, '../','id_rsa_pub.pem');
const PUB_KEY = fs.readFileSync(pathToKey,'utf8'); // async cryptography key

// just for tests
const {users} = require('../db');

// there are many more options in docs
const options = {
    jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
    secretOrKey: PUB_KEY,
    algorithms: ['RS256']
};

// AWS and DynamoDB
var AWS = require("aws-sdk");
AWS.config.update({
    region: "sa-east-1",
    endpoint: "https://dynamodb.sa-east-1.amazonaws.com"
});
var docClient = new AWS.DynamoDB.DocumentClient()

/*
 in this step we already know the JWT was in fact generated by our private key
 (verification done by passport)
 payload contains fields defined in hash-and-token.js (sub,iat,exp)
 so we get the identity of the request by searching the db for the sub of the user
*/
const strategy = new JwtStrategy(options, (payload, done) => {
    //console.log(payload)

    //let userExists = users.filter(user => user.username === payload.sub);
    var params = {
        TableName : "SNROOT",
        Key: {
            PKEY: 'USER#' + payload.sub,
            SKEY: '#METADATA#' + payload.sub 
        }
      };

    docClient.get(params, function(err, data) {
        if(err){
            return done(null, false);

        } else if (!data.Item) {

            return done(null, false);
      
        }else {

            let user = data.Item;
            return done(null, user);
            
        }

    });

});

module.exports = (passport) => {
    passport.use(strategy);
}