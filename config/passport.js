/*
    CONFIGURES JWT STRATEGY
*/
const fs = require('fs');
const path = require('path');
const JwtStrategy = require('passport-jwt').Strategy;
const ExtractJwt = require('passport-jwt').ExtractJwt;


const pathToKey = path.join(__dirname, '../','id_rsa_pub.pem');
const PUB_KEY = fs.readFileSync(pathToKey,'utf8'); // async cryptography key

// just for tests
const {users} = require('../db');
console.log(users);

// there are many more options in docs
const options = {
    jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
    secretOrKey: PUB_KEY,
    algorithms: ['RS256']
};
/*
 in this step we already know the JWT was in fact generated by our private key
 (verification done by passport)
 payload contains fields defined in hash-and-token.js (sub,iat,exp)
 so we get the identity of the request by searching the db for the sub of the user
*/
const strategy = new JwtStrategy(options, (payload, done) => {
    //console.log(payload)
    // this will be replaced by a DB call
    let userExists = users.filter(user => user.username === payload.sub);

    if(userExists.length > 0) {
        return done(null, userExists[0]); // will be available in the next middleware through req.user
    } else {
        return done(null, false);
    }
    // we have to return db error in the first parameter
    // .catch( err => done(err, null));

});

module.exports = (passport) => {
    passport.use(strategy);
}